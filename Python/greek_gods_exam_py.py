# -*- coding: utf-8 -*-
"""greek_gods_exam.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j4eKGuSQfuCKtHLqSgukkvJt-hASiDU-
"""

pip install pandas

pip install numpy

import pandas as pd
import numpy as np

dict1={
    "God":['Zeus', 'Poseidon','Hera','Athena','Hades'],
    "Domain": ['King of the Gods','God of the Sea','Queen of the Gods','Goddess of Wisdom','God of the Underworld'],
    "Symbol":['Thunderbolt','Trident','Peacock','Owl','Helmet'],
    "Age":[10000,9000,8500,8000,9500]
}

Gods_df=pd.DataFrame(dict1)
Gods_df.head()

Gods_df.to_csv("greek_gods.csv",index=False )

dict2={
    "Goddess":['Aphrodite', 'Artemis','Demeter','Hestia','Persephone'],
    "Domain": ['Goddess of Love','Goddess of the Hunt','Goddess of Agriculture','Goddess of the Hearth','Queen of the Underworld'],
    "Symbol":['Love','Bow and Arrow','Wheat','Fire','Pomegranate'],
    "Age":[7000,7500,8000,8200,7800]
}

Goddess_df=pd.DataFrame(dict2)
Goddess_df.head()

Goddess_df.to_csv("greek_goddesses.csv",index=False )

"""# Question 1: Merge data from greek_gods.csv and greek_goddesses.csv

"""

merged_df=pd.concat([Gods_df,Goddess_df], ignore_index=True)

merged_df   #merged_df is the new table which contains the information about both gods and goddesses.

merged_df.to_csv("merged_greek_gods.csv",index=False )

"""
# Question 2: Filter the merged table to only include gods and goddesses who are older than 8000 years, then sort them based on their ages in descending order.
"""

filtered_sorted_df=merged_df[merged_df['Age']>8000]

filtered_sorted_df.sort_values(by='Age',ascending=False)

"""
# Question 3: Join the two tables based on the "Domain" field and calculate the average age of gods and goddesses in each domain."""

merged_domain_df=merged_df.groupby('Domain')['Age'].mean()

merged_domain_df

"""# Question 4.Determine which god/goddess has the highest age, and then find out if they are a god or a goddess.

"""

highest_age_entity_index=merged_df['Age'].idxmax()

highest_age_entity=merged_df.loc[highest_age_entity_index]

print(highest_age_entity)

highest_entity_type= 'God' if highest_age_entity['God'] else 'Goddess'

print(highest_entity_type)

"""#Question 5.Create a new column in each table called "Age_Group" and categorize the gods/goddesses into groups such as "Young" (age < 5000), "Middle-aged" (age between 5000 and 8000), and "Old" (age > 8000)."""

#Categorize Gods/Godesses into age groups
def categorize_age(age):
  if(age<5000):
    return 'Young'
  elif age>=5000 and age<=8000:
    return 'Middle-aged'
  else:
    return 'Old'

merged_df['Age_Group']=merged_df['Age'].apply(categorize_age) #merged_df is the merged table of gods and goddesses

print("Gods and Goddesses with Age Group: ")
print (merged_df[['God','Age','Age_Group']])

"""#Question 6.Compare the average ages of gods and goddesses. Is there a significant age difference between them? If yes, which group tends to be older?

"""

avg_age_gods=Gods_df['Age'].mean()  #getting average ages of gods

avg_age_Goddess=Goddess_df['Age'].mean() #getting average ages of Goddesses

#Differences between them

diff_avg_ages=avg_age_gods -avg_age_Goddess
print(diff_avg_ages)

#So, Yes there is a significant age difference between them.
# Comparing average ages and determining which group tends to be older

if(avg_age_gods>avg_age_Goddess):
  print("Gods tends to be older.")
elif (avg_age_gods<avg_age_Goddess):
  print("Goddesses tend to be older.")
else:
  print("There is no significant age difference between gods and goddesses")

"""# Question 7.Write a Python program using for loop to iterate over the "Age" column of the merged table (after merging the gods and goddesses tables) and print out the names of gods/goddesses who are older than 8000 years.

"""

merged_df

#for loop to iterate over the indices of the merged DataFrame using range(len(merged_df))
for index in range(len(merged_df)):
  age=merged_df.iloc[index]['Age'] #extract the age of the entity at the current index using iloc[].
  if(age>8000):
    if 'God' in merged_df.columns and not pd.isna(merged_df.iloc[index]['God']):
            print(merged_df.iloc[index]['God'])
    elif 'Goddess' in merged_df.columns and not pd.isna(merged_df.iloc[index]['Goddess']):
            print(merged_df.iloc[index]['Goddess'])

"""#8.Write a Python program to find the oldest god/goddess from the merged table (after merging the gods and goddesses tables) by iterating through the "Age" column using a while loop. Print out the name of the oldest god/goddess and their age.

"""

oldest_age=0
oldest_name=None

#initializing the index for while loop
index=0;

#getting the length of thr DataFrame
df_length=len(merged_df)

#iterating over the Age colum and finding the oldest god/goddess

while index<df_length:
  row=merged_df.iloc[index]
  age=merged_df.iloc[index]['Age']
  if age > oldest_age:
    if 'God' in row:
      oldest_name=row['God']
    elif 'Goddess' in row:
      oldest_name=row['Goddess']
    oldest_age=age

  index+=1

print(f"The oldest god/goddess is {oldest_name} with an age of {oldest_age} years.")